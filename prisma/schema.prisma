// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
    document  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id           String      @id @default(uuid())
  customerId   String
  customer     Customer    @relation(fields: [customerId], references: [id])
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        OrderItem[]
  payments     Payment[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
}

model Payment {
  id                 String        @id @default(uuid())
  orderId            String
  order              Order         @relation(fields: [orderId], references: [id])
  externalId         String?       
  status             PaymentStatus @default(PENDING)
  amount             Decimal       @db.Decimal(10, 2)
  paymentMethod      String?
  paymentMethodId    String?       
  paymentProvider    String        @default("MERCADOPAGO")
  paymentUrl         String?       
  transactionDetails Json?         
  notificationSent   Boolean       @default(false) 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([externalId])
}


model EmailNotification {
  id           String   @id @default(uuid())
  recipient    String
  subject      String
  content      String   @db.Text
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  errorMessage String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  IN_PROCESS
  IN_MEDIATION
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}
